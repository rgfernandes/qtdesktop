# -*- coding: utf-8 -*-

= ls =
* contrib	misc dox
* src	source:
** tr		translations
** ui	qt4 forms
** view	MVC view classes - inherits ui/*
** model	MVC model classes
** core	core files - objects as is
** cs_gdata	core sources - GData variant

= Ideas =
* Online | offline [+sync] | caching modes
** Online: each change is commiting "right now" (on OK button)
** Offline: everything works w/ local DB, maybe syncing w/ iNet DB
** Caching: starts from downloading data from iNet, making all changes localy but uploading all changes as fast as possible (like CRM's 'publishing')

= CS_GData
	feed = self.service.Get('/feeds/default/blogs'):
	{'_GDataFeed__generator': <atom.Generator object at 0x8d5b7ac>,
	'_GDataFeed__id': <atom.Id object at 0x8d5b02c>,
	'author': [<atom.Author object at 0x8d5b74c>],
	'category': [],
	'contributor': [],
	'entry': [<gdata.GDataEntry object at 0x8d5b9cc>],
	'extension_attributes': {},
	'extension_elements': [],
	'icon': None,
	'items_per_page': <gdata.ItemsPerPage object at 0x8d5b94c>,
	'link': [<atom.Link object at 0x8d5b68c>,
		<atom.Link object at 0x8d5b6cc>,
		<atom.Link object at 0x8d5b70c>],
	'logo': None,
	'rights': None,
	'start_index': <gdata.StartIndex object at 0x8d5b8ec>,
	'subtitle': None,
	'text': None,
	'title': <atom.Title object at 0x8d5b16c>,
	'total_results': <gdata.TotalResults object at 0x8d5b88c>,
	'updated': <atom.Updated object at 0x8d5b42c>}

Discover blogs:
def	_recoverFeed(feed):
	'''
	@param feed:GDataFeed
	'''
	print '-- recover blog --'
	pprint.pprint(feed.__dict__)
	print '----'
	print "\tType:", type(feed)
	for k in feed.__dict__.keys():
		print "\t%s:" % k
		if (k == '_GDataFeed__generator'):
			pprint.pprint(feed.generator.__dict__)
		elif (k == '_GDataFeed__id'):
			pprint.pprint(feed.id.__dict__)
		elif (k == 'author'):
			for a in feed.author:
				print "\t\t%s:" % k
				pprint.pprint(a.__dict__)
				print "\t\t\tName:"
				pprint.pprint(a.name.__dict__)
		elif (k == 'entry'):
			for e in feed.entry:
				print "\t\tSelfLink:", e.GetSelfLink().__dict__
				print "\t\t%s:" % k
				pprint.pprint(e.__dict__)
				print "\t\tId:"
				pprint.pprint(e.id.__dict__)
				print "\t\tPublished:"
				pprint.pprint(e.published.__dict__)
				print "\t\tSummary:"
				pprint.pprint(e.summary.__dict__)
		elif (k == 'items_per_page'):
			pprint.pprint(feed.items_per_page.__dict__)
		elif (k == 'link'):
			for l in feed.link:
				print "\t\t%s:" % k
				pprint.pprint(l.__dict__)
		elif (k == 'start_index'):
			pprint.pprint(feed.start_index.__dict__)
		elif (k == 'title'):
			pprint.pprint(feed.title.__dict__)
		elif (k == 'total_results'):
			pprint.pprint(feed.total_results.__dict__)
		elif (k == 'updated'):
			pprint.pprint(feed.updated.__dict__)
		else:
			print "\t\t", feed.__dict__[k]

def	_printFeed(feed):
	print "Blog_Id:", feed.entry[0].GetSelfLink().href.split('/')[-1]
##		self_link = feed.entry[0].GetSelfLink()
##		if self_link:
##			self.blog_id = self_link.href.split('/')[-1]
	# generator
	print "\tGenerator:\n\
		text:\t%s\n\
		uri:\t%s\n\
		version:\t%s\
		" % (feed.generator.text, feed.generator.uri, feed.generator.version)
	# id
	print "\tId:\t%s" % feed.id.text
	print "\tCategory:\t", feed.category
	print "\tContributor:\t", feed.contributor
	print "\tIcon:\t", feed.icon
	print "\tItemsPerPage:\t", feed.items_per_page.text
	print "\tLogo:\t", feed.logo
	print "\tRights:\t", feed.rights
	print "\tStartIndex:\t", feed.start_index.text
	print "\tSubTitle:\t", feed.subtitle
	print "\tTitle:\t(%s) %s" % (feed.title.type, feed.title.text)
	print "\tTotalResults:\t", feed.total_results.text
	print "\tUpdated:\t", feed.updated.text
	print "\tAuthors:"
	for i, a in enumerate(feed.author):
		print "\t\tAuthor #%d:\n\
			text:\t%s\n\
			uri:\t%s\n\
			email:\t%s\n\
			name:\t%s\n\
			" % (i, a.text, a.uri, a.email, a.name.text)
	print "\tLinks:"
	for i, l in enumerate(feed.link):
		print "\t\tLink #%d:\n\
			href:\t%s\n\
			hreflang:\t%s\n\
			length:\t%s\n\
			rel:\t%s\n\
			title:\t%s\n\
			type:\t%s\n\
			" % (i, l.text, l.href, l.length, l.rel, l.title, l.type)
	print "\tEntry:"
	for i, e in enumerate(feed.entry):
##		pprint.pprint(e.__dict__)
		print "\t\tEntry #%d:\n\
			id:\t%s\n\
			category:\t%s\n\
			content:\t%s\n\
			contributor:\t%s\n\
			control:\t%s\n\
			published:\t%s\n\
			rights:\t%s\n\
			source:\t%s\n\
			summary:\t%s\n\
			text:\t%s\n\
			title:\t(%s) %s\n\
			updated:\t%s\n\
			" % (i, e.id.text, e.category, e.content, e.contributor, e.control, e.published.text, e.rights, e.source, e.summary, e.text, e.title.type, e.title.text, e.updated.text)

	Text	Title	Summary	Content
Blogsp	-	+	-	-
Blog	-	+	=title	-
Post	-	+(h)	-	+
Comment	-	+(h)	-	+

Calendar Data API	cl
Google Base Data API	gbase
Blogger Data API	blogger
Contacts Data API	cp
Documents List Data API	writely
Picasa Web Albums Data API	lh2
Google Apps Provisioning API	apps
Spreadsheets Data API	wise
YouTube Data API	youtube
